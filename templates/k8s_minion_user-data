#cloud-config
# vim: set ft=yaml:

hostname: k8s_minion

write-files:
  - path: /etc/ssl/certs/ca.pem
    content: |
      ${replace(ca_pem, "\n", "\n      ")}

  - path: /etc/ssl/certs/ca-key.pem
    content: |
      ${replace(ca_key_pem, "\n", "\n      ")}

  - path: /etc/kubernetes/ssl/openssl.cnf
    content: |
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      IP.1 = $ENV::WORKER_IP

  - path: /opt/bin/generate-certs.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      # generate-certs
      # Env var
      #
      # WORKER_IP
      # WORKER_FQDN

      if [ ! -f /etc/kubernetes/ssl/$WORKER_FQDN-worker.pem ]; then
        /usr/bin/mkdir -p /etc/kubernetes/ssl
        /usr/bin/openssl genrsa -out /etc/kubernetes/ssl/$WORKER_FQDN-worker-key.pem 2048
        /usr/bin/openssl req -new -key /etc/kubernetes/ssl/$WORKER_FQDN-worker-key.pem \
          -out /etc/kubernetes/ssl/$WORKER_FQDN-worker.csr \
          -subj "/CN=$WORKER_FQDN" \
          -config /etc/kubernetes/ssl/openssl.cnf
        /usr/bin/openssl x509 -req -in /etc/kubernetes/ssl/$WORKER_FQDN-worker.csr \
          -CA /etc/kubernetes/ssl/ca.pem \
          -CAkey /etc/kubernetes/ssl/ca-key.pem \
          -CAcreateserial \
          -out /etc/kubernetes/ssl/$WORKER_FQDN-worker.pem \
          -days 365 \
          -extensions v3_req \
          -extfile /etc/kubernetes/ssl/openssl.cnf
      fi

  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && [ -n "$2" ] && while ! curl --output /dev/null \
        --silent --head --fail \
        http://${1}:${2}; do sleep 1 && echo -n .; done;
      exit $?
  - path: /etc/flannel/options.env
    content: |
      FLANNELD_IFACE=$public_ipv4
      FLANNELD_ETCD_ENDPOINTS={{ETCD_CLUSTER_NODE_IPS}}

coreos:
  etcd2:
    #generate a new token for each unique cluster from https://discovery.etcd.io/new
    {{#if ETCD_DISCOVERY_TOKEN}}
    discovery: https://discovery.etcd.io/{{ETCD_DISCOVERY_TOKEN}}
    {{/if}}
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$public_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
  fleet:
    etcd_servers: {{ETCD_CLUSTER_NODE_IPS}}
    metadata: role=kubernetes-minion
    public-ip: $public_ipv4
  flannel:
    interface: $public_ipv4
  units:
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: flanneld.service
      drop-ins:
      - name: 40-ExecStartPre-symlink.conf
        content: |
          [Unit]
          Requires=etcd2.service

          [Service]
          ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
      command: start

    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target etcd2.service flanneld.service
        After=network-online.target etcd2.service flanneld.service

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L \
          -o /opt/bin/setup-network-environment \
          -z /opt/bin/setup-network-environment \
          https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot

    - name: generate-certs.service
      command: start
      content: |
        [Unit]
        Description=Generate worker certs

        [Service]
        Environment="HOME=/root"
        Environment=WORKER_IP=$public_ipv4
        Environment=WORKER_FQDN=minion$public_ipv4
        ExecStart=/opt/bin/generate-certs.sh
        RemainAfterExit=yes
        Type=oneshot

    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        ExecStartPre=/usr/bin/curl -L \
          -o /opt/bin/kube-proxy \
          -z /opt/bin/kube-proxy \
          https://storage.googleapis.com/kubernetes-release/release/{{K8S_VERSION}}/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao {{MASTER_IP}} 8080
        ExecStart=/opt/bin/kube-proxy \
          --master=http://{{MASTER_IP}}:8080 \
          --proxy-mode=iptables \
          --logtostderr=true
        Restart=always
        RestartSec=10

    - name: kube-kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        EnvironmentFile=/etc/network-environment
        Environment=WORKER_FQDN=minion$public_ipv4
        Environment=WORKER_IP=$public_ipv4
        ExecStartPre=/usr/bin/curl -L \
          -o /opt/bin/kubelet \
          -z /opt/bin/kubelet \
          https://storage.googleapis.com/kubernetes-release/release/{{K8S_VERSION}}/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao {{MASTER_IP}} 8080
        ExecStart=/opt/bin/kubelet \
          --address=0.0.0.0 \
          --allow-privileged=true \
          --api-servers=http://{{MASTER_IP}}:8080 \
          --cadvisor-port=4194 \
          --cluster-dns={{DNS_SERVICE_IP}} \
          --cluster-domain=cluster.local \
          --healthz-bind-address=0.0.0.0 \
          --healthz-port=10248 \
          --hostname-override=${WORKER_IP} \
          --logtostderr=true \
          --port=10250 \
          --register-node=true \
          --tls-cert-file=/etc/kubernetes/ssl/${WORKER_FQDN}-worker.pem \
          --tls-private-key-file=/etc/kubernetes/ssl/${WORKER_FQDN}-worker-key.pem
        Restart=always
        RestartSec=10
