#cloud-config
# vim: set ft=yaml:

hostname: etcd

coreos:
  etcd2:
    #generate a new token for each unique cluster from https://discovery.etcd.io/new
    {{#if ETCD_DISCOVERY_TOKEN}}
    discovery: https://discovery.etcd.io/{{ETCD_DISCOVERY_TOKEN}}
    {{/if}}
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: https://$public_ipv4:2379
    initial-advertise-peer-urls: https://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: https://0.0.0.0:2379,https://0.0.0.0:4001
    listen-peer-urls: https://$private_ipv4:2380,https://$private_ipv4:7001
  fleet:
    public-ip: $public_ipv4
    metadata: role=etcd
  units:
    - name: etcd2.service
      drop-ins:
      - name: 30-certificates.conf
        content: |
          [Service]
          # client env
          Environment=ETCD_CA_FILE=/etc/ssl/certs/ca.pem
          Environment=ETCD_CERT_FILE=/etc/ssl/certs/coreos.pem
          Environment=ETCD_KEY_FILE=/etc/ssl/certs/coreos-key.pem
          # peer env
          Environment=ETCD_PEER_CA_FILE=/etc/ssl/certs/ca.pem
          Environment=ETCD_PEER_CERT_FILE=/etc/ssl/certs/coreos.pem
          Environment=ETCD_PEER_KEY_FILE=/etc/ssl/certs/coreos-key.pem
      command: start
    - name: fleet.service
      drop-ins:
      - name: 30-certificates.conf
        content: |
          [Service]
          # client certs
          Environment=FLEET_ETCD_CAFILE=/etc/ssl/certs/ca.pem
          Environment=FLEET_ETCD_CERTFILE=/etc/ssl/certs/coreos.pem
          Environment=FLEET_ETCD_KEYFILE=/etc/ssl/certs/coreos-key.pem
      command: start
    - name: iptables-restore.service
      enable: true
      command: start
